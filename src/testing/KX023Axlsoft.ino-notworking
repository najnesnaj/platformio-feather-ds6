#include <SoftWire.h>
SoftWire aWire(14,13);
union data {
	int16_t data16;
	byte  byteStr[2];//{*DATAL,*DATAH}
};
union data xData;
union data yData;
union data zData;

const int sendorDeviceAddress = 0x1F;//I2C7bitAddressMode
const int regAddressXOUTL = 0x06;
const int regAddressYOUTL = 0x08;
const int regAddressZOUTL = 0x0A;
const int regAddressODCNTL = 0x1B;
const int regAddressCNTL1 = 0x18;


void setup() {
	Serial.begin(38400);

	Serial.print("setting up ");
	aWire.setDelay_us(5);
	//KX023debice initialize
	aWire.begin();
	delay(300);
	//stunbymode fullPower GLange2g
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(0x18);
	aWire.write(0x40);
	aWire.endTransmission();
	//outPutDataLate 50Hz
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(0x1B);
	aWire.write(0x02);
	aWire.endTransmission();
	//sensor WakeUp
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(0x18);
	aWire.write(0xC0);
	aWire.endTransmission();
	Serial.print("setting up LPF");

	//setup LPF--------------------------------------------------
	//ここを初期化処理に追加すると加速度センサ側でローパスフィルタがかかります

	//set device standbyMode
	//readCNTL1reg
	byte CNTL1 = 0;
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressCNTL1);
	aWire.endTransmission();
//	aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
//	aWire.readThenAck(CNTL1);
	aWire.requestFrom(sendorDeviceAddress, 1);
	CNTL1 = aWire.read();
	//setCNTL1reg
	CNTL1 = CNTL1 & 0b01111111;
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressCNTL1);
	aWire.write(CNTL1);
	aWire.endTransmission();

	Serial.print("setting up LPF parameters");
	//set LPF parameters
	//readODCNTLreg
	byte ODCNTL = 0;
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressODCNTL);
	aWire.endTransmission();
	//aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
	//aWire.readThenAck(ODCNTL);
	aWire.requestFrom(sendorDeviceAddress, 1);
	ODCNTL = aWire.read();
	//setODCNTLreg
	ODCNTL = ODCNTL | 0b01000000;//set filter corner frequency set to ODR/2
	ODCNTL = ODCNTL & 0b11110000;//set OutputDataRate 12.5Hz
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressODCNTL);
	aWire.write(ODCNTL);
	aWire.endTransmission();

	Serial.print("setting up device operating mode");
	//set device operating mode
	//readCNTL1reg
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressCNTL1);
	aWire.endTransmission();
	//aWire.requestFrom(sendorDeviceAddress, 1);
	aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
	//aWire.readThenAck(CNTL1);
	CNTL1 = aWire.read();
	//setCNTL1reg
	CNTL1 = CNTL1 | 0b10000000;
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressCNTL1);
	aWire.write(CNTL1);
	aWire.endTransmission();
	//--------------------------------------------------setup LPF

delay(100);
}

void loop() {
	byte jlow,jhigh, pec;

        aWire.startWait(sendorDeviceAddress, SoftWire::writeMode);
	// Wire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressXOUTL);
	aWire.stop();
	aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
	aWire.readThenAck(jlow);
	aWire.readThenAck(jhigh);
//	aWire.readThenAck(pec);
	aWire.stop();
	//aWire.startWait(sendorDeviceAddress, SoftWire::writeMode);
	//aWire.write(regAddressJOUTL);
	//aWire.stop();
//	aWire.endTransmission();
	//aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
	//byte htest;
	//aWire.readThenAck(htest);
	Serial.print(jhigh, DEC);
	Serial.print(jlow, DEC);
	Serial.println("X");


delay(100);
	aWire.startWait(sendorDeviceAddress, SoftWire::writeMode);
//	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressXOUTL);
//	aWire.endTransmission(sendorDeviceAddress);

 // aWire.beginTransmission(sendorDeviceAddress);
//aWire.write(regAddressYOUTL);
	aWire.stop();
	//aWire.endTransmission();
	aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
// aWire.requestFrom(sendorDeviceAddress, 2);
	aWire.readThenAck(jhigh);
	aWire.readThenAck(jlow);
//jlow = aWire.read();
//jhigh = aWire.read();
//	aWire.readThenAck(pec);
//	aWire.stop();
	//aWire.startWait(sendorDeviceAddress, SoftWire::writeMode);
	//aWire.write(regAddressJOUTL);
	aWire.stop();
	//aWire.repeatedStart(sendorDeviceAddress, SoftWire::readMode);
	//byte htest;
	//aWire.readThenAck(htest);
	Serial.print(jlow, DEC);
	Serial.print(jhigh, DEC);
	Serial.println("Y");




	//readXout
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressXOUTL);
	aWire.endTransmission();
	aWire.requestFrom(sendorDeviceAddress, 2);
	xData.byteStr[0] = aWire.read();
	xData.byteStr[1] = aWire.read();

	//readYout
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressYOUTL);
	aWire.endTransmission();
	aWire.requestFrom(sendorDeviceAddress, 2);
	yData.byteStr[0] = aWire.read();
	yData.byteStr[1] = aWire.read();

	//readZout
	aWire.beginTransmission(sendorDeviceAddress);
	aWire.write(regAddressZOUTL);
	aWire.endTransmission();
	aWire.requestFrom(sendorDeviceAddress, 2);
	zData.byteStr[0] = aWire.read();
	zData.byteStr[1] = aWire.read();

	//  //rawDataOutput
	Serial.print("xdata:");
	Serial.print(xData.data16, DEC);
	Serial.print(",");
	Serial.print("ydata:");
	Serial.print(yData.data16, DEC);
	Serial.print(",");
	Serial.print("zdata:");
	Serial.println(zData.data16, DEC);

	//  Serial.print(xData.data16, DEC);
	// Serial.print(",");
	//Serial.print(yData.data16, DEC);
	// Serial.print(",");
	// Serial.println(zData.data16, DEC);

	//long xdata = xData.data16;
	//long ydata = yData.data16;
	//long zdata = zData.data16;
	//
	//double Norm = sqrt(double(pow(xdata,2) + pow(ydata,2) + pow(zdata,2)))-(32767/2);
	//Serial.print(Norm,DEC);
	//Serial.print(',');
	//static double vector = vector+Norm;
	//Serial.println(vector,DEC);

	delay(100);

}
