
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <ds6_SSD1306.h>
#include <bluefruit.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 32

//Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, PIN_SPI_MOSI, PIN_SPI_SCK, OLED_DC, OLED_RST, OLED_CS);
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &SPI,  OLED_DC, OLED_RST, OLED_CS);

int i;

/* HRM Service Definitions
 * Heart Rate Monitor Service:  0x180D
 * Heart Rate Measurement Char: 0x2A37
 * Body Sensor Location Char:   0x2A38
 */

BLEService        hrms = BLEService(UUID16_SVC_HEART_RATE);

BLECharacteristic hrmc = BLECharacteristic(UUID16_CHR_HEART_RATE_MEASUREMENT);

BLECharacteristic bslc = BLECharacteristic(UUID16_CHR_BODY_SENSOR_LOCATION);



BLEDis bledis;    // DIS (Device Information Service) helper class instance

BLEBas blebas;    // BAS (Battery Service) helper class instance





void setup()
{
	//	pinMode(PIN_VIBRATE, OUTPUT);
	Serial.begin(38400); //to comply with the standard settings DFU
	Serial.println(__FILE__);


	if(!display.begin(SSD1306_SWITCHCAPVCC)) {
		Serial.println("SSD1306 allocation failed");
	}
	else
		Serial.println("SSD1306 allocation worked!");


	Serial.println("Initialise the Bluefruit nRF52 module");

//	Bluefruit.begin();



	// Set the advertised device name (keep it short!)

	Serial.println("Setting Device Name to 'Feather52 HRM'");

//	Bluefruit.setName("Bluefruit52 HRM");



	// Set the connect/disconnect callback handlers

//	Bluefruit.Periph.setConnectCallback(connect_callback);

//	Bluefruit.Periph.setDisconnectCallback(disconnect_callback);



	// Configure and Start the Device Information Service

	Serial.println("Configuring the Device Information Service");

//	bledis.setManufacturer("Adafruit Industries");

//	bledis.setModel("Bluefruit Feather52");

//	bledis.begin();



	// Start the BLE Battery Service and set it to 100%

	Serial.println("Configuring the Battery Service");

//	blebas.begin();

//	blebas.write(100);



	// Setup the Heart Rate Monitor service using

	// BLEService and BLECharacteristic classes

	Serial.println("Configuring the Heart Rate Monitor Service");

	//      setupHRM();



	// Setup the advertising packet(s)

	Serial.println("Setting up the advertising payload(s)");

//	startAdv();

}

/*
void startAdv(void)

{

	// Advertising packet

	Bluefruit.Advertising.addFlags(BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE);

	Bluefruit.Advertising.addTxPower();



	// Include HRM Service UUID

	Bluefruit.Advertising.addService(hrms);



	// Include Name

	Bluefruit.Advertising.addName();



	/* Start Advertising

	 * - Enable auto advertising if disconnected

	 * - Interval:  fast mode = 20 ms, slow mode = 152.5 ms

	 * - Timeout for fast mode is 30 seconds

	 * - Start(timeout) with timeout = 0 will advertise forever (until connected)

	 * 

	 * For recommended advertising interval

	 * https://developer.apple.com/library/content/qa/qa1931/_index.html   

	 */

	Bluefruit.Advertising.restartOnDisconnect(true);

	Bluefruit.Advertising.setInterval(32, 244);    // in unit of 0.625 ms

	Bluefruit.Advertising.setFastTimeout(30);      // number of seconds in fast mode

	Bluefruit.Advertising.start(0);                // 0 = Don't stop advertising after n seconds  

}

void connect_callback(uint16_t conn_handle)

{

	// Get the reference to current connection

	BLEConnection* connection = Bluefruit.Connection(conn_handle);



	char central_name[32] = { 0 };

	connection->getPeerName(central_name, sizeof(central_name));



	Serial.print("Connected to ");

	Serial.println(central_name);

}

*/

/**

 * Callback invoked when a connection is dropped

 * @param conn_handle connection where this event happens

 * @param reason is a BLE_HCI_STATUS_CODE which can be found in ble_hci.h

 */

/*

void disconnect_callback(uint16_t conn_handle, uint8_t reason)

{

	(void) conn_handle;

	(void) reason;



	Serial.println("Disconnected");

	Serial.println("Advertising!");

}

*/


void loop()
{
	Serial.println("test");
	//	digitalWrite(PIN_VIBRATE, 1);
	delay(20);
	//	digitalWrite(PIN_VIBRATE, 0);
	delay(20);

	if (Serial.available() > 0) {
		// read the incoming byte:
		Serial.println("incoming byte");

	}
	display.clearDisplay();
	for (i=1; i<30; i++)
	{
		display.drawPixel(i, i, WHITE);
	}

	display.display();




}









